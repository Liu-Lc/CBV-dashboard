events {
    worker_connections 10;  # This is the maximum number of connections per worker
}

http {
    # Define rate limiting (20 requests per minute per IP)
    limit_req_zone $binary_remote_addr zone=login_limit:10m rate=20r/m;

    server {
        listen 443 ssl;
        server_name 35.217.120.133;

        # SSL configuration
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client on;  # Enforce client certificate authentication
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # ðŸ”¹ Enforce HTTPS Strict Transport Security (HSTS)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        location / {
            # Apply rate limiting (20 req/min, burst 10)
            limit_req zone=login_limit burst=10 nodelay;
            
            # Proxy request to the Python app (now on port 80)
            proxy_pass http://app:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # Redirect all HTTP (port 80) traffic to HTTPS (port 443)
    server {
        listen 80;
        server_name 35.217.120.133;
        return 301 https://$host$request_uri;
    }
}
